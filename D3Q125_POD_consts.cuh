#define SEMI_LAGRANGIAN
#define DIM 3
#define QN 125
#define QN_IN_DIM 1000   // QN*2^DIM
constexpr const ftype TLat=1;//(1.-0.6324555320336759);///100.;//1/3.;
const ftype Dim=3;
const ftype Tmin=0;
const ftype Tmax=TLat*10;

const ftype ec1=1.3556261799742657;
const ftype ec2=2.8569700138728056;
const ftype ec1d=ec1*ec1;
const ftype ec2d=ec2*ec2;
constexpr const ftype3 _ef[QN] = {
  {0   , 0   , 0 }, {0   , 0   , +ec1 }, {0   , 0   , -ec1}, {0   , 0   , +ec2}, {0   , 0   , -ec2}, // 0--4
  {0   , +ec1, 0 }, {0   , +ec1, +ec1 }, {0   , +ec1, -ec1}, {0   , +ec1, +ec2}, {0   , +ec1, -ec2}, // 5--9
  {0   , -ec1, 0 }, {0   , -ec1, +ec1 }, {0   , -ec1, -ec1}, {0   , -ec1, +ec2}, {0   , -ec1, -ec2}, // 10--14
  {0   , +ec2, 0 }, {0   , +ec2, +ec1 }, {0   , +ec2, -ec1}, {0   , +ec2, +ec2}, {0   , +ec2, -ec2}, // 15--19
  {0   , -ec2, 0 }, {0   , -ec2, +ec1 }, {0   , -ec2, -ec1}, {0   , -ec2, +ec2}, {0   , -ec2, -ec2}, // 20--24
  {+ec1, 0   , 0 }, {+ec1, 0   , +ec1 }, {+ec1, 0   , -ec1}, {+ec1, 0   , +ec2}, {+ec1, 0   , -ec2}, // 25--29
  {+ec1, +ec1, 0 }, {+ec1, +ec1, +ec1 }, {+ec1, +ec1, -ec1}, {+ec1, +ec1, +ec2}, {+ec1, +ec1, -ec2}, // 30--34
  {+ec1, -ec1, 0 }, {+ec1, -ec1, +ec1 }, {+ec1, -ec1, -ec1}, {+ec1, -ec1, +ec2}, {+ec1, -ec1, -ec2}, // 35--39
  {+ec1, +ec2, 0 }, {+ec1, +ec2, +ec1 }, {+ec1, +ec2, -ec1}, {+ec1, +ec2, +ec2}, {+ec1, +ec2, -ec2}, // 40--44
  {+ec1, -ec2, 0 }, {+ec1, -ec2, +ec1 }, {+ec1, -ec2, -ec1}, {+ec1, -ec2, +ec2}, {+ec1, -ec2, -ec2}, // 45--49
  {-ec1, 0   , 0 }, {-ec1, 0   , +ec1 }, {-ec1, 0   , -ec1}, {-ec1, 0   , +ec2}, {-ec1, 0   , -ec2}, // 50--54
  {-ec1, +ec1, 0 }, {-ec1, +ec1, +ec1 }, {-ec1, +ec1, -ec1}, {-ec1, +ec1, +ec2}, {-ec1, +ec1, -ec2}, // 55--59
  {-ec1, -ec1, 0 }, {-ec1, -ec1, +ec1 }, {-ec1, -ec1, -ec1}, {-ec1, -ec1, +ec2}, {-ec1, -ec1, -ec2}, // 60--64
  {-ec1, +ec2, 0 }, {-ec1, +ec2, +ec1 }, {-ec1, +ec2, -ec1}, {-ec1, +ec2, +ec2}, {-ec1, +ec2, -ec2}, // 65--69
  {-ec1, -ec2, 0 }, {-ec1, -ec2, +ec1 }, {-ec1, -ec2, -ec1}, {-ec1, -ec2, +ec2}, {-ec1, -ec2, -ec2}, // 70--74
  {+ec2, 0   , 0 }, {+ec2, 0   , +ec1 }, {+ec2, 0   , -ec1}, {+ec2, 0   , +ec2}, {+ec2, 0   , -ec2}, // 75--79
  {+ec2, +ec1, 0 }, {+ec2, +ec1, +ec1 }, {+ec2, +ec1, -ec1}, {+ec2, +ec1, +ec2}, {+ec2, +ec1, -ec2}, // 80--84
  {+ec2, -ec1, 0 }, {+ec2, -ec1, +ec1 }, {+ec2, -ec1, -ec1}, {+ec2, -ec1, +ec2}, {+ec2, -ec1, -ec2}, // 85--89
  {+ec2, +ec2, 0 }, {+ec2, +ec2, +ec1 }, {+ec2, +ec2, -ec1}, {+ec2, +ec2, +ec2}, {+ec2, +ec2, -ec2}, // 90--94
  {+ec2, -ec2, 0 }, {+ec2, -ec2, +ec1 }, {+ec2, -ec2, -ec1}, {+ec2, -ec2, +ec2}, {+ec2, -ec2, -ec2}, // 95--99
  {-ec2, 0   , 0 }, {-ec2, 0   , +ec1 }, {-ec2, 0   , -ec1}, {-ec2, 0   , +ec2}, {-ec2, 0   , -ec2}, // 100--104
  {-ec2, +ec1, 0 }, {-ec2, +ec1, +ec1 }, {-ec2, +ec1, -ec1}, {-ec2, +ec1, +ec2}, {-ec2, +ec1, -ec2}, // 105--109
  {-ec2, -ec1, 0 }, {-ec2, -ec1, +ec1 }, {-ec2, -ec1, -ec1}, {-ec2, -ec1, +ec2}, {-ec2, -ec1, -ec2}, // 110--114
  {-ec2, +ec2, 0 }, {-ec2, +ec2, +ec1 }, {-ec2, +ec2, -ec1}, {-ec2, +ec2, +ec2}, {-ec2, +ec2, -ec2}, // 115--119
  {-ec2, -ec2, 0 }, {-ec2, -ec2, +ec1 }, {-ec2, -ec2, -ec1}, {-ec2, -ec2, +ec2}, {-ec2, -ec2, -ec2}, // 120--124
};
constexpr const ftype cs2 = TLat;
const ftype W0=(3*TLat*TLat-(ec1d+ec2d)*TLat+ec1d*ec2d)/(ec1d*ec2d);
const ftype W1=TLat*(ec2d-3*TLat)/(2*ec1d*(ec2d-ec1d));
const ftype W2=TLat*(ec1d-3*TLat)/(2*ec2d*(ec1d-ec2d));
constexpr ftype _w[QN] = {
  W0*W0*W0, W0*W0*W1, W0*W0*W1, W0*W0*W2, W0*W0*W2,
  W0*W1*W0, W0*W1*W1, W0*W1*W1, W0*W1*W2, W0*W1*W2,
  W0*W1*W0, W0*W1*W1, W0*W1*W1, W0*W1*W2, W0*W1*W2,
  W0*W2*W0, W0*W2*W1, W0*W2*W1, W0*W2*W2, W0*W2*W2,
  W0*W2*W0, W0*W2*W1, W0*W2*W1, W0*W2*W2, W0*W2*W2,
  W1*W0*W0, W1*W0*W1, W1*W0*W1, W1*W0*W2, W1*W0*W2,
  W1*W1*W0, W1*W1*W1, W1*W1*W1, W1*W1*W2, W1*W1*W2,
  W1*W1*W0, W1*W1*W1, W1*W1*W1, W1*W1*W2, W1*W1*W2,
  W1*W2*W0, W1*W2*W1, W1*W2*W1, W1*W2*W2, W1*W2*W2,
  W1*W2*W0, W1*W2*W1, W1*W2*W1, W1*W2*W2, W1*W2*W2,
  W1*W0*W0, W1*W0*W1, W1*W0*W1, W1*W0*W2, W1*W0*W2,
  W1*W1*W0, W1*W1*W1, W1*W1*W1, W1*W1*W2, W1*W1*W2,
  W1*W1*W0, W1*W1*W1, W1*W1*W1, W1*W1*W2, W1*W1*W2,
  W1*W2*W0, W1*W2*W1, W1*W2*W1, W1*W2*W2, W1*W2*W2,
  W1*W2*W0, W1*W2*W1, W1*W2*W1, W1*W2*W2, W1*W2*W2,
  W2*W0*W0, W2*W0*W1, W2*W0*W1, W2*W0*W2, W2*W0*W2,
  W2*W1*W0, W2*W1*W1, W2*W1*W1, W2*W1*W2, W2*W1*W2,
  W2*W1*W0, W2*W1*W1, W2*W1*W1, W2*W1*W2, W2*W1*W2,
  W2*W2*W0, W2*W2*W1, W2*W2*W1, W2*W2*W2, W2*W2*W2,
  W2*W2*W0, W2*W2*W1, W2*W2*W1, W2*W2*W2, W2*W2*W2,
  W2*W0*W0, W2*W0*W1, W2*W0*W1, W2*W0*W2, W2*W0*W2,
  W2*W1*W0, W2*W1*W1, W2*W1*W1, W2*W1*W2, W2*W1*W2,
  W2*W1*W0, W2*W1*W1, W2*W1*W1, W2*W1*W2, W2*W1*W2,
  W2*W2*W0, W2*W2*W1, W2*W2*W1, W2*W2*W2, W2*W2*W2,
  W2*W2*W0, W2*W2*W1, W2*W2*W1, W2*W2*W2, W2*W2*W2,
};

constexpr const int3 _MomentsPower[QN] = {
  {0,0,0},{1,0,0},{2,0,0},{3,0,0},{4,0,0}, {0,1,0},{1,1,0},{2,1,0},{3,1,0},{4,1,0}, {0,2,0},{1,2,0},{2,2,0},{3,2,0},{4,2,0}, {0,3,0},{1,3,0},{2,3,0},{3,3,0},{4,3,0}, {0,4,0},{1,4,0},{2,4,0},{3,4,0},{4,4,0},
  {0,0,1},{1,0,1},{2,0,1},{3,0,1},{4,0,1}, {0,1,1},{1,1,1},{2,1,1},{3,1,1},{4,1,1}, {0,2,1},{1,2,1},{2,2,1},{3,2,1},{4,2,1}, {0,3,1},{1,3,1},{2,3,1},{3,3,1},{4,3,1}, {0,4,1},{1,4,1},{2,4,1},{3,4,1},{4,4,1},
  {0,0,2},{1,0,2},{2,0,2},{3,0,2},{4,0,2}, {0,1,2},{1,1,2},{2,1,2},{3,1,2},{4,1,2}, {0,2,2},{1,2,2},{2,2,2},{3,2,2},{4,2,2}, {0,3,2},{1,3,2},{2,3,2},{3,3,2},{4,3,2}, {0,4,2},{1,4,2},{2,4,2},{3,4,2},{4,4,2},
  {0,0,3},{1,0,3},{2,0,3},{3,0,3},{4,0,3}, {0,1,3},{1,1,3},{2,1,3},{3,1,3},{4,1,3}, {0,2,3},{1,2,3},{2,2,3},{3,2,3},{4,2,3}, {0,3,3},{1,3,3},{2,3,3},{3,3,3},{4,3,3}, {0,4,3},{1,4,3},{2,4,3},{3,4,3},{4,4,3},
  {0,0,4},{1,0,4},{2,0,4},{3,0,4},{4,0,4}, {0,1,4},{1,1,4},{2,1,4},{3,1,4},{4,1,4}, {0,2,4},{1,2,4},{2,2,4},{3,2,4},{4,2,4}, {0,3,4},{1,3,4},{2,3,4},{3,3,4},{4,3,4}, {0,4,4},{1,4,4},{2,4,4},{3,4,4},{4,4,4},
};

HOST_DEV_CHOOSE const int3 MomentsPower[QN] = { SEQ_LIST_COLLECTION(_MomentsPower,QN) };
HOST_DEV_CHOOSE const ftype3 ef[QN] = { SEQ_LIST_COLLECTION(_ef,QN) };
HOST_DEV_CHOOSE const int3 e[QN] = {0};


